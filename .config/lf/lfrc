<<<<<<< HEAD
=======
set previewer ~/.config/lf/preview
# interpreter for shell commands (needs to be POSIX compatible)
>>>>>>> d059b91a56abed9255a9cfe2d40509877468c3cc
set shell sh
set ifs "\n"
set icons
set drawbox
set shellopts '-eu'
set previewer ~/.config/lf/pv
set cleaner ~/.config/lf/cls
set scrolloff 10

<<<<<<< HEAD
=======
# set previewer ~/.config/lf/pv
set cleaner ~/.config/lf/clear_img.sh
>>>>>>> d059b91a56abed9255a9cfe2d40509877468c3cc
map i $~/.config/lf/pv.sh $f | less -R 
map i $LESSOPEN='| ~/.config/lf/pv.sh %s' less -R $f

map P :link

map n
map nf push %touch<space>
map nd push %mkdir<space>

#Set mouse wheel to scroll up and down
map <c-y> up
map <c-e> down

# Toggle dotfiles
map . set hidden!

map zi set icons!
map <delete> trash

map <c-f> !$EDITOR $(fzf)

map gb :git_branch
map gp ${{clear; git pull --rebase || true; echo "press ENTER"; read ENTER}}
map gs ${{clear; git status; echo "press ENTER"; read ENTER}}
map gl ${{clear; git log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit}}

# leave some space at the top and the bottom of the screen

# use enter for shell commands
map <enter> shell

# execute current file (must be executable)
map x $$f
map X !$f

# dedicated keys for file opener actions
map o &xdg-open $f
map O $xdg-open --ask $f

# define a custom 'open' command
# This command is called when current file is not a directory. You may want to
# use either file extensions and/or mime types here. Below uses an editor for
# text files and a file opener for the rest.
# Open archives using vim's archive viewers
cmd open ${{
    case $(file --mime-type $f -b) in
        text/*|application/*zip*|application/*arc*|application/x-7z-compressed|application/vnd.rar) $EDITOR $fx;;
        *) for f in $fx; do setsid $OPENER $f > /dev/null 2> /dev/null & done;;
    esac
}}

# move current file or selected files to trash folder
# (also see 'man mv' for backup/overwrite options)
cmd trash %set -f; mv $fx ~/.local/share/trash

cmd git_branch ${{
    git branch | fzf | xargs git checkout 
    pwd_shell=$(pwd)
    lf -remote "send $id updir"
    lf -remote "send $id cd \"$pwd_shell\""
}}

cmd on-cd &{{
    # display git repository status in your prompt
    source /usr/share/git/completion/git-prompt.sh
    GIT_PS1_SHOWDIRTYSTATE=auto
    GIT_PS1_SHOWSTASHSTATE=auto
    GIT_PS1_SHOWUNTRACKEDFILES=auto
    GIT_PS1_SHOWUPSTREAM=auto
    GIT_PS1_COMPRESSSPARSESTATE=auto
    git=$(__git_ps1 " [GIT BRANCH:> %s]") || true
    fmt="\033[32;1m%u@%h\033[0m:\033[34;1m%w\033[0m\033[33;1m$git\033[0m"
    lf -remote "send $id set promptfmt \"$fmt\""
}}

# extract the current file with the right command
cmd extract ${{
    set -f
    case $f in
        *.tar.bz|*.tar.bz2|*.tbz|*.tbz2) tar xjvf $f;;
        *.tar.gz|*.tgz) tar xzvf $f;;
        *.tar.xz|*.txz) tar xJvf $f;;
        *.zip) unzip $f;;
        *.rar) unrar x $f;;
        *.7z) 7z x $f;;
    esac
}}

# compress current file or selected files with tar and gunzip
cmd tar ${{
    set -f
    mkdir $1
    cp -r $fx $1
    tar czf $1.tar.gz $1
    rm -rf $1
}}

# compress current file or selected files with zip
cmd zip ${{
    set -f
    mkdir $1
    cp -r $fx $1
    zip -r $1.zip $1
    rm -rf $1
}}
cmd link %{{
    set -- $(lf -remote load)
    mode="$1"
    shift
    if [ "$#" -lt 1 ]; then
        lf -remote "send $id echo no files to link"
        exit 0
    fi
    case "$mode" in
        # symbolically copy mode is indicating a soft link
        copy) ln -sr -t . -- "$@";;
        # while a move mode is indicating a hard link
        move) ln -t . -- "$@";;
    esac
}}
